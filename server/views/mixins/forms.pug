- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= t(`mixins.forms.${propertyName}`)
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      maxlength='100'
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin inputTextarea(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= t(`mixins.forms.${propertyName}`)
    textarea(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      maxlength='255'
      rows="3"
    )= _.get(entity, propertyName, '')
    if !_.isEmpty(propertyErrors)
          .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')
mixin inputSelectFilter(entity, propertyName, selected)
  - inputId = getInputId(propertyName)
    label.input-group-text(for= inputId)= t(`mixins.labels.${propertyName}`)
    select.form-select(id= inputId name= propertyName)
      option
      each item in entity
        option(
          value= item.id
          selected= (Number(selected[propertyName]) === item.id ? 'selected' : null)
          )= item.name

mixin inputSelect(entity, propertyName, errors = {}, object)
  - propertyErrors = _.get(errors, propertyName)
  - inputId = getInputId(propertyName)
  - classLine = 'form-select' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(for= inputId)= t(`mixins.labels.${propertyName}`)
    select(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      )
      option
      each item in entity
        option(
          value= item.id
          selected= (Number(object[propertyName]) === Number(item.id)) ? 'selected' : false 
          )= item.name
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin inputSelectMultipleLabels(entity, propertyName, errors = {}, object)
  - propertyErrors = _.get(errors, convertPropertyName(propertyName))
  - inputId = getInputId(propertyName)
  - classLine = 'form-select' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(for= inputId)= t(`mixins.labels.${propertyName}`)
    select(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      multiple='multiple'
      )
      each item in entity
        option(
          value= item.id
          selected= (_.find(object[propertyName], { id: item.id })) ? 'selected' : false 
          )= item.name
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(form = null)
  input(class='btn btn-warning' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)
